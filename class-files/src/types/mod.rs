pub mod raw;
pub mod resolved;

bitflags::bitflags! {
    /// <https://docs.oracle.com/javase/specs/jvms/se7/html/jvms-4.html#jvms-4.6-200-A.1>
    #[derive(Debug, Clone, Copy, Default)]
    pub struct MethodAccessFlags: u16 {
        /// Declared public; may be accessed from outside its package.
        const PUBLIC = 0x0001;
        /// Declared private; accessible only within the defining class.
        const PRIVATE = 0x0002;
        /// Declared protected; may be accessed within subclasses.
        const PROTECTED = 0x0004;
        /// Declared static.
        const STATIC = 0x0008;
        /// Declared final; must not be overridden (ยง5.4.5).
        const FINAL = 0x0010;
        /// Declared synchronized; invocation is wrapped by a monitor use.
        const SYNCHRONIZED = 0x0020;
        /// A bridge method, generated by the compiler.
        const BRIDGE = 0x0040;
        /// Declared with variable number of arguments.
        const VARARGS = 0x0080;
        /// Declared native; implemented in a language other than Java.
        const NATIVE = 0x0100;
        /// Declared abstract; no implementation is provided.
        const ABSTRACT = 0x0400;
        /// Declared strictfp; floating-point mode is FP-strict.
        const STRICT = 0x0800;
        /// Declared synthetic; not present in the source code.
        const SYNTHETIC = 0x1000;
    }
}

bitflags::bitflags! {
    #[derive(Debug, Clone, Copy, Default)]
    pub struct FieldAccessFlags: u16 {
        /// Declared public; may be accessed from outside its package.
        const PUBLIC    = 0x0001;
        /// Declared private; usable only within the defining class.
        const PRIVATE   = 0x0002;
        /// Declared protected; may be accessed within subclasses.
        const PROTECTED = 0x0004;
        /// Declared static.
        const STATIC    = 0x0008;
        /// Declared final; never directly assigned to after object construction (JLS ยง17.5).
        const FINAL     = 0x0010;
        /// Declared volatile; cannot be cached.
        const VOLATILE  = 0x0040;
        /// Declared transient; not written or read by a persistent object manager.
        const TRANSIENT = 0x0080;
        /// Declared synthetic; not present in the source code.
        const SYNTHETIC = 0x1000;
        /// Declared as an element of an enum.
        const ENUM      = 0x4000;
    }
}

bitflags::bitflags! {
    /// <https://docs.oracle.com/javase/specs/jvms/se7/html/jvms-4.html#jvms-4.1-200-E.1>
    #[derive(Debug, Clone, Copy, Default)]
    pub struct ClassAccessFlags: u16 {
        /// Declared public; may be accessed from outside its package.
        const PUBLIC = 0x0001;

        /// Declared final; no subclasses allowed.
        const FINAL = 0x0010;

        /// Treat superclass methods specially when invoked by the invokespecial instruction.
        const SUPER = 0x0020;

        /// Is an interface, not a class.
        const INTERFACE = 0x0200;

        /// Declared abstract; must not be instantiated.
        const ABSTRACT = 0x0400;

        /// Declared synthetic; not present in the source code.
        const SYNTHETIC = 0x1000;

        /// Declared as an annotation type.
        const ANNOTATION = 0x2000;

        /// Declared as an enum type.
        const ENUM = 0x4000;
    }
}

bitflags::bitflags! {
    /// <https://docs.oracle.com/javase/specs/jvms/se7/html/jvms-4.html#jvms-4.7.6-300-D.2-5>
    #[derive(Debug, Clone, Copy, Default)]
    pub struct NestedClassAccessFlags: u16 {
        /// Marked or implicitly public in source.
        const PUBLIC = 0x0001;

        /// Marked private in source.
        const PRIVATE = 0x0002;

        /// Marked protected in source.
        const PROTECTED = 0x0004;

        /// Marked or implicitly static in source.
        const STATIC = 0x0008;

        /// Marked final in source.
        const FINAL = 0x0010;

        /// Was an interface in source.
        const INTERFACE = 0x0200;

        /// Marked or implicitly abstract in source.
        const ABSTRACT = 0x0400;

        /// Declared synthetic; not present in the source code.
        const SYNTHETIC = 0x1000;

        /// Declared as an annotation type.
        const ANNOTATION = 0x2000;

        /// Declared as an enum type.
        const ENUM = 0x4000;
    }
}
